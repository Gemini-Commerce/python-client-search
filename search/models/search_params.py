# coding: utf-8

"""
    Search Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from search.models.search_param_attribute import SearchParamAttribute
from search.models.search_param_facet import SearchParamFacet
from search.models.search_param_filter import SearchParamFilter
from search.models.search_param_searchable import SearchParamSearchable
from search.models.search_param_sort import SearchParamSort
from typing import Optional, Set
from typing_extensions import Self

class SearchParams(BaseModel):
    """
    contains params needed to perform search
    """ # noqa: E501
    offset: Optional[StrictInt] = Field(default=None, description="number of the record where to start to take result for pagination")
    limit: Optional[StrictInt] = Field(default=None, description="number of search result for page")
    term: Optional[StrictStr] = Field(default=None, description="term to search")
    searchables: Optional[List[SearchParamSearchable]] = Field(default=None, description="list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration")
    filters: Optional[List[SearchParamFilter]] = Field(default=None, description="list of attribute and relative value which you want to filter search results")
    attributes: Optional[List[SearchParamAttribute]] = Field(default=None, description="attributes that you want to be present in search results")
    facets: Optional[List[SearchParamFacet]] = Field(default=None, description="list of attributes you want to create aggregation to make filter suggestion")
    sorts: Optional[List[SearchParamSort]] = Field(default=None, description="params to sort search results")
    min_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minScore")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["offset", "limit", "term", "searchables", "filters", "attributes", "facets", "sorts", "minScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in searchables (list)
        _items = []
        if self.searchables:
            for _item_searchables in self.searchables:
                if _item_searchables:
                    _items.append(_item_searchables.to_dict())
            _dict['searchables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item_facets in self.facets:
                if _item_facets:
                    _items.append(_item_facets.to_dict())
            _dict['facets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sorts (list)
        _items = []
        if self.sorts:
            for _item_sorts in self.sorts:
                if _item_sorts:
                    _items.append(_item_sorts.to_dict())
            _dict['sorts'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "offset": obj.get("offset"),
            "limit": obj.get("limit"),
            "term": obj.get("term"),
            "searchables": [SearchParamSearchable.from_dict(_item) for _item in obj["searchables"]] if obj.get("searchables") is not None else None,
            "filters": [SearchParamFilter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "attributes": [SearchParamAttribute.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "facets": [SearchParamFacet.from_dict(_item) for _item in obj["facets"]] if obj.get("facets") is not None else None,
            "sorts": [SearchParamSort.from_dict(_item) for _item in obj["sorts"]] if obj.get("sorts") is not None else None,
            "minScore": obj.get("minScore")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


