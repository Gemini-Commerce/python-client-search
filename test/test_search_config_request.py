# coding: utf-8

"""
    Search Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from search.models.search_config_request import SearchConfigRequest

class TestSearchConfigRequest(unittest.TestCase):
    """SearchConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchConfigRequest:
        """Test SearchConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchConfigRequest`
        """
        model = SearchConfigRequest()
        if include_optional:
            return SearchConfigRequest(
                tenant_id = '',
                config_schema = [
                    search.models.search_config_schema.searchConfigSchema(
                        index = '', 
                        document_key_name = '', 
                        attributes = [
                            search.models.search_config_schema_attribute.searchConfigSchemaAttribute(
                                name = '', 
                                type = 'TEXT', 
                                language = '', )
                            ], 
                        searchables = [
                            search.models.search_config_schema_searchable.searchConfigSchemaSearchable(
                                attribute = '', )
                            ], 
                        facets = [
                            search.models.search_config_schema_facet.searchConfigSchemaFacet(
                                attribute = '', )
                            ], 
                        filters = [
                            search.models.search_config_schema_filter.searchConfigSchemaFilter(
                                attribute = '', )
                            ], 
                        sortables = [
                            search.models.search_config_schema_sortable.searchConfigSchemaSortable(
                                attribute = '', )
                            ], )
                    ]
            )
        else:
            return SearchConfigRequest(
        )
        """

    def testSearchConfigRequest(self):
        """Test SearchConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
