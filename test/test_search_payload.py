# coding: utf-8

"""
    Search Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from search.models.search_payload import SearchPayload

class TestSearchPayload(unittest.TestCase):
    """SearchPayload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchPayload:
        """Test SearchPayload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchPayload`
        """
        model = SearchPayload()
        if include_optional:
            return SearchPayload(
                index = '',
                params = search.models.search_params.searchParams(
                    offset = 56, 
                    limit = 56, 
                    term = '', 
                    searchables = [
                        search.models.search_param_searchable.searchParamSearchable(
                            attribute = '', )
                        ], 
                    filters = [
                        search.models.search_param_filter.searchParamFilter(
                            filter = '', 
                            type = 'TERM', )
                        ], 
                    attributes = [
                        search.models.search_param_attribute.searchParamAttribute(
                            attribute = '', )
                        ], 
                    facets = [
                        search.models.search_param_facet.searchParamFacet(
                            attribute = '', 
                            limit = 56, 
                            params = '', 
                            name = '', )
                        ], 
                    sorts = [
                        search.models.search_param_sort.searchParamSort(
                            attribute = '', 
                            order = 'ASC', )
                        ], 
                    min_score = 1.337, )
            )
        else:
            return SearchPayload(
                index = '',
                params = search.models.search_params.searchParams(
                    offset = 56, 
                    limit = 56, 
                    term = '', 
                    searchables = [
                        search.models.search_param_searchable.searchParamSearchable(
                            attribute = '', )
                        ], 
                    filters = [
                        search.models.search_param_filter.searchParamFilter(
                            filter = '', 
                            type = 'TERM', )
                        ], 
                    attributes = [
                        search.models.search_param_attribute.searchParamAttribute(
                            attribute = '', )
                        ], 
                    facets = [
                        search.models.search_param_facet.searchParamFacet(
                            attribute = '', 
                            limit = 56, 
                            params = '', 
                            name = '', )
                        ], 
                    sorts = [
                        search.models.search_param_sort.searchParamSort(
                            attribute = '', 
                            order = 'ASC', )
                        ], 
                    min_score = 1.337, ),
        )
        """

    def testSearchPayload(self):
        """Test SearchPayload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
